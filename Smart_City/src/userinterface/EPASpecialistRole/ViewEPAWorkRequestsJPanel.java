/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.EPASpecialistRole;

import userinterface.MayorRole.*;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.EPAOrganization;
import Business.Organization.MayorOrganization;
import Business.Organization.Organization;
import Business.Sensor.AirSensor;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ChiefAdminOfficerEPASpecialistWorkRequest;
import Business.WorkQueue.EPASpecialistMayorWorkRequest;
import Business.WorkQueue.HealthOfficerMayorWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


public class ViewEPAWorkRequestsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    //EcoSystem system;
    private EPAOrganization organization;
    private Enterprise enterprise;
    private UserAccount account;
    
    
    public ViewEPAWorkRequestsJPanel(JPanel panel, UserAccount ua, EPAOrganization mOrg, Enterprise etr) {
        initComponents(); 
        this.userProcessContainer = panel;
        //this.system = system;
        this.organization = mOrg;
        this.enterprise = etr;
        this.account = ua;
        populateEngReqTable();
        populateMayorReqTable();
    }
    
    
    public void populateEngReqTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        System.out.println("organization:"+organization);
        System.out.println("organization Work Q:"+organization.getWorkQueue());
        System.out.println("organization Work Req List:"+organization.getWorkQueue().getWorkRequestList());
        
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            ChiefAdminOfficerEPASpecialistWorkRequest req = (ChiefAdminOfficerEPASpecialistWorkRequest)request;
            System.out.println("Status::::"+req.getDate().getAirQualityStatus());
            if((req.getDate().getAirQualityStatus().equals("Healthy"))|| (req.getDate().getAirQualityStatus().equals("Unhealthy"))){
            System.out.println("Processinggggg::::"+req.getDate().getAirQualityStatus());
            Object[] row = new Object[6];
            row[0] = req.getPatientName();
            row[1] = req.getDate();
            row[2] = req;
            row[3] = req.getSender().getEmployee().getName();
            row[4] = req.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[5] = req.getStatus();

            model.addRow(row);
            }
        }
    }

    public void populateMayorReqTable(){
        DefaultTableModel model = (DefaultTableModel)mayorRequestJTable.getModel();
        
        model.setRowCount(0);
        System.out.println("organization:"+organization);
        System.out.println("organization Work Q:"+organization.getWorkQueue());
        System.out.println("organization Work Req List:"+organization.getWorkQueue().getWorkRequestList());
        
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            ChiefAdminOfficerEPASpecialistWorkRequest req = (ChiefAdminOfficerEPASpecialistWorkRequest)request;
            System.out.println("Status::::"+req.getDate().getAirQualityStatus());
            if((req.getDate().getAirQualityStatus().equals("Hazardous"))|| (req.getDate().getAirQualityStatus().equals("Very Hazardous"))){
                System.out.println("Processinggggg::::"+req.getDate().getAirQualityStatus());
            Object[] row = new Object[6];
            row[0] = req.getPatientName();
            row[1] = req.getDate();
            row[2] = req;
            row[3] = req.getSender().getEmployee().getName();
            row[4] = req.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[5] = req.getStatus();
            //System.out.println("Account Work Req List:"+account.getWorkQueue().getWorkRequestList());
            
            model.addRow(row);
        }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        processJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        mayorRequestJTable = new javax.swing.JTable();
        assignJButton1 = new javax.swing.JButton();
        refreshJButton1 = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        enterpriseLabel1 = new javax.swing.JLabel();

        setBackground(java.awt.Color.white);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Date", "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 610, 90));

        processJButton.setBackground(java.awt.Color.white);
        processJButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 200, -1, -1));

        mayorRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Date", "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(mayorRequestJTable);
        if (mayorRequestJTable.getColumnModel().getColumnCount() > 0) {
            mayorRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            mayorRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            mayorRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            mayorRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            mayorRequestJTable.getColumnModel().getColumn(4).setResizable(false);
            mayorRequestJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 610, 90));

        assignJButton1.setBackground(java.awt.Color.white);
        assignJButton1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        assignJButton1.setText("Assign to Mayor");
        assignJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButton1ActionPerformed(evt);
            }
        });
        add(assignJButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 370, 130, -1));

        refreshJButton1.setBackground(java.awt.Color.white);
        refreshJButton1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        refreshJButton1.setText("<<<Back");
        refreshJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButton1ActionPerformed(evt);
            }
        });
        add(refreshJButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 430, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("EPA Work Request");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, -1, -1));

        enterpriseLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        enterpriseLabel1.setText("Critical Requests:");
        add(enterpriseLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        ChiefAdminOfficerEPASpecialistWorkRequest request = (ChiefAdminOfficerEPASpecialistWorkRequest)workRequestJTable.getValueAt(selectedRow, 2);
     
        request.setStatus("Processing");
        
        ProcessEPAWorkRequestJPanel processWorkRequestJPanel = new ProcessEPAWorkRequestJPanel(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_processJButtonActionPerformed

    private void assignJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButton1ActionPerformed
        // TODO add your handling code here:
        EPASpecialistMayorWorkRequest emWrequest = new EPASpecialistMayorWorkRequest();
        
        int selectedRow =  mayorRequestJTable.getSelectedRow();
        WorkRequest req = (WorkRequest)mayorRequestJTable.getValueAt(selectedRow, 2);
        ChiefAdminOfficerEPASpecialistWorkRequest cwr = (ChiefAdminOfficerEPASpecialistWorkRequest)req;
        System.out.println(":::cwr:::::::::::"+cwr);
        System.out.println("cwr.getPatientName()::::::::::::::"+cwr.getPatientName());
        System.out.println("cwr.getDate()::::::::::::::"+cwr.getDate());
        System.out.println("cwr.getMessage()::::::::::::::"+cwr.getMessage());
        System.out.println("account::::::::::::::"+account+"...."+cwr.getReceiver());
        System.out.println("cwr.getSender()"+cwr.getPatientName());
        emWrequest.setPatientName(cwr.getPatientName());
        emWrequest.setAsDate(cwr.getDate());
        emWrequest.setMessage("Schedule an appointment");
        emWrequest.setReceiver(account);
        emWrequest.setSender(cwr.getSender());
        emWrequest.setStatus("Sent");
        System.out.println("Setting done :P ");
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof MayorOrganization){
                System.out.println("Inside organization");
                org = organization;
                System.out.println("Ogranization::::::"+ org);
                break;
            }
        }
        if (org!=null){
            System.out.println("Inside nt null org:::"+ account);
            org.getWorkQueue().getWorkRequestList().add(emWrequest);
            account.getWorkQueue().getWorkRequestList().add(emWrequest);
            System.out.println("................");
        }
        populateMayorReqTable();
    }//GEN-LAST:event_assignJButton1ActionPerformed

    private void refreshJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_refreshJButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton1;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable mayorRequestJTable;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
